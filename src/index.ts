import * as Bluebird from 'bluebird';
import { app as appIn, remote } from 'electron';
import * as path from 'path';
import { log, types } from 'vortex-api';
import * as winapi from 'winapi-bindings';

const app = remote !== undefined ? remote.app : appIn;

// the uuid gets generated by the electron-builder package using uuid v5 with
// com.nexusmods.vortex as the url and a hard-coded namespace
// it should never change
const UUID = '57979c68-f490-55b8-8fed-8b017a5af2fe';

async function verifyUninstallEntry(api: types.IExtensionApi): Promise<types.ITestResult> {
  const t = api.translate;

  let invalid: string;
  let extra: string;
  try {
    winapi.WithRegOpen('HKEY_LOCAL_MACHINE',
                       `SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\${UUID}`,
      hkey => {
        const uninstallString = winapi.RegGetValue(hkey, '', 'UninstallString');
        if ((uninstallString === undefined) || (uninstallString.type !== 'REG_SZ')) {
          invalid = t('Vortex uninstall key is incomplete');
        } else {
          const match = (uninstallString.value as string).match(/\w+|"(?:\\"|[^"])+"/g);
          if (match !== null) {
            const value = path.dirname(match[0].replace(/^"|"$/g, ''));
            let expected = app.getAppPath();
            if (path.basename(expected) === 'app.asar') {
              expected = path.dirname(path.dirname(expected));
            }
            if (value.toLowerCase() !== expected.toLowerCase()) {
              invalid = t('Vortex uninstall path doesn\'t match current executable');
              extra = t('"{{value}}" vs "{{expected}}"', {
                replace: {
                  value,
                  expected,
                },
              });
            }
          } else {
            // if this didn't match that's more likely a bug in our regex, not an error
            //   in the registry
            log('warn', 'Failed to match uninstall string', { uninstallString });
          }
        }
      });
  } catch (err) {
    invalid = t('No Vortex uninstall key');
  }

  if (invalid !== undefined) {
    let long = t('The uninstall key for Vortex is missing or corrupted. This may lead to '
                + 'problems the next time Vortex gets updated. Please reinstall Vortex.')
              + '<br/><br/>' + invalid;
    if (extra !== undefined) {
      long += '<br/><br/>' + extra;
    }
    return Promise.resolve({
      severity: 'warning',
      description: {
        short: invalid,
        long,
      },
    });
  }
}

function init(context: types.IExtensionContext) {
  if (process.platform === 'win32') {
    context.registerTest('uninstall-entry', 'startup',
      () => Bluebird.resolve(verifyUninstallEntry(context.api)));
  }
}

export default init;
